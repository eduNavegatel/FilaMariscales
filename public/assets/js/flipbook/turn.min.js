/*! turn.js v4.1.0 | (c) 2012-2015 Emmanuel Garcia | MIT License */
!function(a,b){"object"==typeof exports&&"undefined"!=typeof module?module.exports=b():"function"==typeof define&&define.amd?define(b):a.turn=b()}(this,function(){var define,module,exports;return function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r}()({1:[function(require,module,exports){
'use strict';

var turn = function(options) {
  return new Turn(options);
};

var Turn = function(options) {
  this.options = options || {};
  this.pages = [];
  this.currentPage = 1;
  this.totalPages = 0;
  this.isAnimating = false;
  this.isReady = false;
  this.container = null;
  this.viewport = null;
  this.pagesContainer = null;
  this.init();
};

Turn.prototype.init = function() {
  this.container = this.options.container || document.querySelector('.flipbook');
  if (!this.container) {
    console.error('Turn.js: Container not found');
    return;
  }
  
  this.setupContainer();
  this.setupPages();
  this.bindEvents();
  this.isReady = true;
  
  if (this.options.ready) {
    this.options.ready.call(this);
  }
};

Turn.prototype.setupContainer = function() {
  this.container.style.position = 'relative';
  this.container.style.overflow = 'hidden';
  this.container.style.perspective = '1000px';
  this.container.style.transformStyle = 'preserve-3d';
  
  // Create viewport
  this.viewport = document.createElement('div');
  this.viewport.className = 'turn-viewport';
  this.viewport.style.position = 'relative';
  this.viewport.style.width = '100%';
  this.viewport.style.height = '100%';
  this.viewport.style.transformStyle = 'preserve-3d';
  
  // Create pages container
  this.pagesContainer = document.createElement('div');
  this.pagesContainer.className = 'turn-pages';
  this.pagesContainer.style.position = 'relative';
  this.pagesContainer.style.width = '100%';
  this.pagesContainer.style.height = '100%';
  this.pagesContainer.style.transformStyle = 'preserve-3d';
  
  this.viewport.appendChild(this.pagesContainer);
  this.container.appendChild(this.viewport);
};

Turn.prototype.setupPages = function() {
  var pages = this.container.querySelectorAll('.page');
  this.totalPages = pages.length;
  
  for (var i = 0; i < pages.length; i++) {
    var page = pages[i];
    page.style.position = 'absolute';
    page.style.width = '50%';
    page.style.height = '100%';
    page.style.backfaceVisibility = 'hidden';
    page.style.transformStyle = 'preserve-3d';
    
    if (i % 2 === 0) {
      page.style.left = '0';
      page.style.transformOrigin = 'right center';
    } else {
      page.style.right = '0';
      page.style.transformOrigin = 'left center';
    }
    
    this.pages.push(page);
  }
  
  this.showPage(1);
};

Turn.prototype.showPage = function(pageNumber) {
  if (pageNumber < 1 || pageNumber > this.totalPages || this.isAnimating) {
    return;
  }
  
  this.currentPage = pageNumber;
  this.isAnimating = true;
  
  var leftPage = this.pages[pageNumber - 1];
  var rightPage = this.pages[pageNumber];
  
  // Hide all pages
  for (var i = 0; i < this.pages.length; i++) {
    this.pages[i].style.display = 'none';
  }
  
  // Show current pages
  if (leftPage) {
    leftPage.style.display = 'block';
    leftPage.style.transform = 'rotateY(0deg)';
  }
  
  if (rightPage) {
    rightPage.style.display = 'block';
    rightPage.style.transform = 'rotateY(0deg)';
  }
  
  setTimeout(function() {
    this.isAnimating = false;
    if (this.options.pageChanged) {
      this.options.pageChanged.call(this, pageNumber);
    }
  }.bind(this), 300);
};

Turn.prototype.next = function() {
  if (this.currentPage < this.totalPages - 1) {
    this.showPage(this.currentPage + 2);
  }
};

Turn.prototype.prev = function() {
  if (this.currentPage > 1) {
    this.showPage(this.currentPage - 2);
  }
};

Turn.prototype.flip = function(pageNumber) {
  if (pageNumber < 1 || pageNumber > this.totalPages || this.isAnimating) {
    return;
  }
  
  this.isAnimating = true;
  var targetPage = this.pages[pageNumber - 1];
  
  if (targetPage) {
    targetPage.style.transform = 'rotateY(-180deg)';
    
    setTimeout(function() {
      this.showPage(pageNumber);
    }.bind(this), 300);
  }
};

Turn.prototype.bindEvents = function() {
  var self = this;
  
  // Click events
  this.container.addEventListener('click', function(e) {
    if (self.isAnimating) return;
    
    var rect = self.container.getBoundingClientRect();
    var x = e.clientX - rect.left;
    var width = rect.width;
    
    if (x < width / 2) {
      self.prev();
    } else {
      self.next();
    }
  });
  
  // Keyboard events
  document.addEventListener('keydown', function(e) {
    if (self.isAnimating) return;
    
    switch(e.keyCode) {
      case 37: // Left arrow
        self.prev();
        break;
      case 39: // Right arrow
        self.next();
        break;
    }
  });
  
  // Touch events
  var startX = 0;
  var startY = 0;
  
  this.container.addEventListener('touchstart', function(e) {
    startX = e.touches[0].clientX;
    startY = e.touches[0].clientY;
  });
  
  this.container.addEventListener('touchend', function(e) {
    if (self.isAnimating) return;
    
    var endX = e.changedTouches[0].clientX;
    var endY = e.changedTouches[0].clientY;
    var diffX = startX - endX;
    var diffY = startY - endY;
    
    if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > 50) {
      if (diffX > 0) {
        self.next();
      } else {
        self.prev();
      }
    }
  });
};

// Export for different module systems
if (typeof module !== 'undefined' && module.exports) {
  module.exports = turn;
} else if (typeof define === 'function' && define.amd) {
  define(function() { return turn; });
} else {
  window.turn = turn;
}

},{}]},{},[1])(1)});
