<?php
// Script para diagnosticar por qu√© la p√°gina sale en blanco
echo "<h1>Diagn√≥stico de P√°gina en Blanco</h1>";

// Verificar errores de PHP
echo "<h2>Verificaci√≥n de Errores PHP:</h2>";

// Habilitar reporte de errores
error_reporting(E_ALL);
ini_set('display_errors', 1);

echo "<p>‚úÖ Reporte de errores habilitado</p>";

// Verificar archivos cr√≠ticos
echo "<h2>Verificaci√≥n de Archivos Cr√≠ticos:</h2>";

$archivosCriticos = [
    'src/views/admin/users/index.php' => 'Vista principal de usuarios',
    'src/controllers/AdminController.php' => 'Controlador de admin',
    'src/helpers/SecurityHelper.php' => 'Helper de seguridad',
    'src/config/config.php' => 'Configuraci√≥n',
    'src/models/Database.php' => 'Modelo de base de datos'
];

foreach ($archivosCriticos as $archivo => $descripcion) {
    if (file_exists($archivo)) {
        echo "<p>‚úÖ $descripcion existe</p>";
        
        // Verificar sintaxis PHP
        $output = [];
        $returnCode = 0;
        exec("php -l $archivo 2>&1", $output, $returnCode);
        
        if ($returnCode === 0) {
            echo "<p style='margin-left: 20px;'>‚úÖ Sintaxis PHP correcta</p>";
        } else {
            echo "<p style='margin-left: 20px; color: red;'>‚ùå Error de sintaxis:</p>";
            foreach ($output as $line) {
                echo "<p style='margin-left: 40px; color: red;'>$line</p>";
            }
        }
    } else {
        echo "<p>‚ùå $descripcion NO existe</p>";
    }
}

// Probar inclusi√≥n de archivos
echo "<h2>Prueba de Inclusi√≥n de Archivos:</h2>";

try {
    echo "<p>Probando inclusi√≥n de config.php...</p>";
    require_once 'src/config/config.php';
    echo "<p>‚úÖ config.php incluido correctamente</p>";
} catch (Exception $e) {
    echo "<p>‚ùå Error al incluir config.php: " . $e->getMessage() . "</p>";
}

try {
    echo "<p>Probando inclusi√≥n de Database.php...</p>";
    require_once 'src/models/Database.php';
    echo "<p>‚úÖ Database.php incluido correctamente</p>";
} catch (Exception $e) {
    echo "<p>‚ùå Error al incluir Database.php: " . $e->getMessage() . "</p>";
}

try {
    echo "<p>Probando inclusi√≥n de SecurityHelper.php...</p>";
    require_once 'src/helpers/SecurityHelper.php';
    echo "<p>‚úÖ SecurityHelper.php incluido correctamente</p>";
} catch (Exception $e) {
    echo "<p>‚ùå Error al incluir SecurityHelper.php: " . $e->getMessage() . "</p>";
}

// Verificar funci√≥n generateCsrfToken
echo "<h2>Verificaci√≥n de Funci√≥n CSRF:</h2>";

if (function_exists('generateCsrfToken')) {
    echo "<p>‚úÖ Funci√≥n generateCsrfToken existe</p>";
    try {
        $token = generateCsrfToken();
        echo "<p>‚úÖ Token generado: " . substr($token, 0, 10) . "...</p>";
    } catch (Exception $e) {
        echo "<p>‚ùå Error al generar token: " . $e->getMessage() . "</p>";
    }
} else {
    echo "<p>‚ùå Funci√≥n generateCsrfToken NO existe</p>";
}

// Probar conexi√≥n a base de datos
echo "<h2>Prueba de Conexi√≥n a Base de Datos:</h2>";

try {
    $db = new Database();
    echo "<p>‚úÖ Conexi√≥n a base de datos exitosa</p>";
    
    // Probar consulta simple
    $db->query("SELECT 1 as test");
    $result = $db->single();
    echo "<p>‚úÖ Consulta de prueba exitosa</p>";
    
} catch (Exception $e) {
    echo "<p>‚ùå Error de base de datos: " . $e->getMessage() . "</p>";
}

// Verificar vista espec√≠fica
echo "<h2>Verificaci√≥n de Vista de Usuarios:</h2>";

$vistaPath = 'src/views/admin/users/index.php';
if (file_exists($vistaPath)) {
    echo "<p>‚úÖ Vista de usuarios existe</p>";
    
    // Leer contenido de la vista
    $contenido = file_get_contents($vistaPath);
    
    // Verificar elementos cr√≠ticos
    $elementosCriticos = [
        'SecurityHelper' => 'Inclusi√≥n del SecurityHelper',
        'generateCsrfToken' => 'Funci√≥n CSRF',
        'openEditModal' => 'Funci√≥n JavaScript',
        'editModal' => 'Modal de edici√≥n',
        'Bootstrap' => 'Referencias a Bootstrap'
    ];
    
    foreach ($elementosCriticos as $buscar => $desc) {
        if (strpos($contenido, $buscar) !== false) {
            echo "<p style='margin-left: 20px;'>‚úÖ $desc encontrado</p>";
        } else {
            echo "<p style='margin-left: 20px; color: orange;'>‚ö†Ô∏è $desc NO encontrado</p>";
        }
    }
    
    // Verificar sintaxis espec√≠fica
    echo "<h3>Verificaci√≥n de Sintaxis Espec√≠fica:</h3>";
    
    // Buscar posibles errores de sintaxis
    $erroresComunes = [
        '<?php' => 'Etiqueta de apertura PHP',
        '?>' => 'Etiqueta de cierre PHP',
        'require_once' => 'Inclusi√≥n de archivos',
        'function' => 'Definici√≥n de funciones',
        'class' => 'Definici√≥n de clases'
    ];
    
    foreach ($erroresComunes as $buscar => $desc) {
        if (strpos($contenido, $buscar) !== false) {
            echo "<p style='margin-left: 20px;'>‚úÖ $desc presente</p>";
        } else {
            echo "<p style='margin-left: 20px; color: orange;'>‚ö†Ô∏è $desc no encontrado</p>";
        }
    }
    
} else {
    echo "<p>‚ùå Vista de usuarios NO existe</p>";
}

// Simular la vista para detectar errores
echo "<h2>Simulaci√≥n de Vista:</h2>";

echo "<p>Intentando simular la vista de usuarios...</p>";

try {
    // Incluir archivos necesarios
    require_once 'src/config/config.php';
    require_once 'src/models/Database.php';
    require_once 'src/helpers/SecurityHelper.php';
    
    // Simular datos
    $data = [
        'users' => [
            (object)[
                'id' => 1,
                'nombre' => 'Test',
                'apellidos' => 'Usuario',
                'email' => 'test@example.com',
                'rol' => 'user',
                'activo' => 1,
                'created_at' => date('Y-m-d H:i:s')
            ]
        ]
    ];
    
    echo "<p>‚úÖ Datos simulados creados</p>";
    
    // Probar funci√≥n CSRF
    $csrfToken = generateCsrfToken();
    echo "<p>‚úÖ Token CSRF generado: " . substr($csrfToken, 0, 10) . "...</p>";
    
    echo "<p>‚úÖ Simulaci√≥n exitosa - No hay errores cr√≠ticos</p>";
    
} catch (Exception $e) {
    echo "<p>‚ùå Error en simulaci√≥n: " . $e->getMessage() . "</p>";
    echo "<p>Stack trace: " . $e->getTraceAsString() . "</p>";
}

// Verificar logs de error
echo "<h2>Verificaci√≥n de Logs:</h2>";

$logFiles = [
    '/var/log/apache2/error.log',
    '/var/log/httpd/error_log',
    'C:/xampp/apache/logs/error.log',
    'error.log'
];

foreach ($logFiles as $logFile) {
    if (file_exists($logFile)) {
        echo "<p>‚úÖ Log encontrado: $logFile</p>";
        $logContent = file_get_contents($logFile);
        $lines = explode("\n", $logContent);
        $recentLines = array_slice($lines, -10);
        
        echo "<p><strong>√öltimas 10 l√≠neas del log:</strong></p>";
        echo "<div style='background-color: #f5f5f5; padding: 10px; border-radius: 5px; font-family: monospace; font-size: 12px;'>";
        foreach ($recentLines as $line) {
            if (!empty(trim($line))) {
                echo htmlspecialchars($line) . "<br>";
            }
        }
        echo "</div>";
        break;
    }
}

// Instrucciones para solucionar
echo "<h2>Instrucciones para Solucionar:</h2>";
echo "<ol>";
echo "<li><strong>Verifica los errores mostrados arriba</strong></li>";
echo "<li><strong>Revisa los logs de Apache/PHP</strong></li>";
echo "<li><strong>Comprueba que todos los archivos existen</strong></li>";
echo "<li><strong>Verifica la sintaxis PHP de los archivos</strong></li>";
echo "<li><strong>Aseg√∫rate de que las funciones est√°n disponibles</strong></li>";
echo "<li><strong>Limpia la cach√© del navegador</strong></li>";
echo "</ol>";

// Enlaces de prueba
echo "<h2>Enlaces de Prueba:</h2>";
echo "<p><a href='/prueba-php/public/admin/usuarios' target='_blank'>üîó Administraci√≥n - Usuarios</a></p>";
echo "<p><a href='/prueba-php/test-edit-user-button.php' target='_blank'>üîó Diagn√≥stico del Bot√≥n</a></p>";

echo "<h2>Estado del Diagn√≥stico:</h2>";
echo "<p>Este script ha verificado los posibles problemas que causan la p√°gina en blanco.</p>";
echo "<p>Revisa los errores mostrados arriba para identificar el problema espec√≠fico.</p>";
?>
